## Script for running NicheNet on tumor/mucosa data
## CD3+ sorted T populations from various tissues together with Lin-HLDR+ populations from various tissues
## FM, 2020-01-27


## Load required packages, including MAST
library(Seurat)
library(tidyverse)
library(MAST)
library(nichenetr)
library(SeuratWrappers)
library(harmony)
library(RColorBrewer)
library(circlize)

## Read in RDS files for T cell and HLADR data
## Subset HLADR data to only contain tumor cells
## Subset T cell data to only contain tumor + mucosa cells
#data.integrated.clean <- readRDS(file = "~/Desktop/CD3_and_HLADR_integrated_HARMONY.RDS")
Idents(HLADR.integrated) <- "orig.ident"
Idents(CD3.integrated.clean) <- "orig.ident"
Nichenet.HLADR <- subset(HLADR.integrated, idents = c("Tumor"))
Nichenet.CD3 <- subset(CD3.integrated.clean, idents = c("Tumor", "Mucosa"))

## Read in NicheNets ligand-target model 
ligand_target_matrix = readRDS(url("https://zenodo.org/record/3260758/files/ligand_target_matrix.rds"))
ligand_target_matrix[1:5,1:5] # target genes in rows, ligands in columns

lr_network = readRDS(url("https://zenodo.org/record/3260758/files/lr_network.rds"))
head(lr_network)

weighted_networks = readRDS(url("https://zenodo.org/record/3260758/files/weighted_networks.rds"))
weighted_networks_lr = weighted_networks$lr_sig %>% inner_join(lr_network %>% distinct(from,to), by = c("from","to"))

head(weighted_networks$lr_sig)
head(weighted_networks$gr)


## Define receiver and sender
# Do some plotting to ensure that the objects and clusters match main analysis
Idents(Nichenet.HLADR) <- "RNA_snn_res.0.2"
Idents(Nichenet.CD3) <- "RNA_snn_res.0.4"
color.vector <- c(brewer.pal(8, "Set1"), brewer.pal(12, "Set3"), brewer.pal(8, "Dark2"), brewer.pal(8, "Accent"))
DimPlot(Nichenet.HLADR, reduction = "umap", pt.size = 0.1, label = T, cols = color.vector)
DimPlot(Nichenet.CD3, reduction = "umap", pt.size = 0.1, label = T, cols = color.vector)
VlnPlot(object = Nichenet.HLADR,
        features = c("FCGR3A", "CLEC10A", "CD14", "CADM1", "BIRC3", "IRF7", "GZMB", "CLU", "CADM1"), 
        pt.size = 0, ncol = 3, cols = color.vector)
DimPlot(Nichenet.CD3, reduction = "umap", pt.size = 0.1, label = T, cols = color.vector)
VlnPlot(object = Nichenet.CD3,
        features = c("CD3E", "CD4", "CD8B", "FOXP3", "CTLA4", "IFNG", "GZMB"), 
        pt.size = 0, ncol = 3, cols = color.vector)

VlnPlot(subset(x = Nichenet.CD3, idents = "5"), group.by = "orig.ident",
        features = c("FOXP3", "IL1R1", "TNFRSF9"), 
        pt.size = 2, ncol = 3, cols = c("#ff7f00", "#BE1E2D"))



# Make same names for the different T cell subsets
# receiver needs to be changed from CD4s, to CD8s and Tregs for the different NicheNet runs
TcellsAll = c(0:6)
Tregs = c(5)
CD8s = c(1,3,4)
CD4s = c(0,2)
receiver = Tregs
expressed_genes_receiver = get_expressed_genes(receiver, Nichenet.CD3, pct = 0.1)
background_expressed_genes = expressed_genes_receiver %>% .[. %in% rownames(ligand_target_matrix)]

# Make some names for different APC subsets
# for all the different NicheNet runs, sender cell population is kept the same
# Myeloid all is all clusters without pDCs and mast cells
MyeloidAll = c(0,1,2,3,6,9)
mono = c(0,1)
infl = c(3)
tiss = c(9)
mast = c(5)
cross = c(6)
pDC = c(4)
cDC2s = c(2,3)
sender_celltypes = MyeloidAll

list_expressed_genes_sender = sender_celltypes %>% unique() %>% lapply(get_expressed_genes, Nichenet.HLADR, 0.05) # lapply to get the expressed genes of every sender cell type separately here
expressed_genes_sender = list_expressed_genes_sender %>% unlist() %>% unique()


## Define a gene set of interest as shown in the main NicheNet vignette
# DE gene test in the receiving cell population (T cells, with tumor over mucosa)
seurat_obj_receiver = subset(Nichenet.CD3, idents = receiver)
seurat_obj_receiver = SetIdent(seurat_obj_receiver, value = seurat_obj_receiver[["orig.ident"]])

condition_oi = "Tumor"
condition_reference = "Mucosa" 

DE_table_receiver = FindMarkers(object = seurat_obj_receiver, ident.1 = condition_oi, ident.2 = condition_reference, min.pct = 0.1, verbose = T) %>% rownames_to_column("gene")
geneset_oi = DE_table_receiver %>% filter(p_val_adj <= 0.05 & abs(avg_logFC) >= 0.25) %>% pull(gene)
geneset_oi = geneset_oi %>% .[. %in% rownames(ligand_target_matrix)]

## Define a set of potential ligands
ligands = lr_network %>% pull(from) %>% unique()
receptors = lr_network %>% pull(to) %>% unique()
expressed_ligands = intersect(ligands,expressed_genes_sender)
expressed_receptors = intersect(receptors,expressed_genes_receiver)
potential_ligands = lr_network %>% filter(from %in% expressed_ligands & to %in% expressed_receptors) %>% pull(from) %>% unique()

## Perform NicheNet ligand activity analysis, focus on the top 20 ligands
ligand_activities = predict_ligand_activities(geneset = geneset_oi, 
                                              background_expressed_genes = background_expressed_genes, 
                                              ligand_target_matrix = ligand_target_matrix, 
                                              potential_ligands = potential_ligands)

ligand_activities = ligand_activities %>% arrange(-pearson) %>% mutate(rank = rank(desc(pearson)))
ligand_activities
best_upstream_ligands = ligand_activities %>% top_n(23, pearson) %>% arrange(-pearson) %>% pull(test_ligand) %>% unique()

# Plot the expression patterns for the ligands across the different APC clusters
DotPlot(Nichenet.HLADR, features = best_upstream_ligands %>% rev(), cols = c("#238A8DFF", "#FDE725FF"),
        dot.scale = 12) + RotatedAxis()
#ggsave(filename = "Nichenet TUMvsMUC sender Tregs receiver MYELOID-ALL DotPlot VIRIDIS.pdf", plot = last_plot(), dpi = 300, width = 8, height = 8)


### Infer receptors
active_ligand_target_links_df = best_upstream_ligands %>% lapply(get_weighted_ligand_target_links,geneset = geneset_oi, ligand_target_matrix = ligand_target_matrix, n = 200) %>% bind_rows() %>% drop_na()

active_ligand_target_links = prepare_ligand_target_visualization(ligand_target_df = active_ligand_target_links_df, ligand_target_matrix = ligand_target_matrix, cutoff = 0.33)

order_ligands = intersect(best_upstream_ligands, colnames(active_ligand_target_links)) %>% rev() %>% make.names()
order_targets = active_ligand_target_links_df$target %>% unique() %>% intersect(rownames(active_ligand_target_links)) %>% make.names()
rownames(active_ligand_target_links) = rownames(active_ligand_target_links) %>% make.names() # make.names() for heatmap visualization of genes like H2-T23
colnames(active_ligand_target_links) = colnames(active_ligand_target_links) %>% make.names() # make.names() for heatmap visualization of genes like H2-T23

vis_ligand_target = active_ligand_target_links[order_targets,order_ligands] %>% t()

p_ligand_target_network = vis_ligand_target %>% make_heatmap_ggplot("Prioritized ligands","Predicted target genes", 
                                                                    color = "purple",legend_position = "top", x_axis_position = "top",legend_title = "Regulatory potential")  + theme(axis.text.x = element_text(face = "italic")) + scale_fill_gradient2(low = "whitesmoke",  high = "#440154", breaks = c(0,0.006,0.012))
p_ligand_target_network
#ggsave(filename = "Nichenet TUMvsMUC sender Tregs receiver MYELOID-ALL ligand-target-network.pdf", plot = last_plot(), dpi = 300, width = 8, height = 8)


## Receptors of top-ranked ligands
lr_network_top = lr_network %>% filter(from %in% best_upstream_ligands & to %in% expressed_receptors) %>% distinct(from,to)
best_upstream_receptors = lr_network_top %>% pull(to) %>% unique()


lr_network_top_df_large = weighted_networks_lr %>% filter(from %in% best_upstream_ligands & to %in% best_upstream_receptors)

lr_network_top_df = lr_network_top_df_large %>% spread("from","weight",fill = 0)
lr_network_top_matrix = lr_network_top_df %>% select(-to) %>% as.matrix() %>% magrittr::set_rownames(lr_network_top_df$to)

dist_receptors = dist(lr_network_top_matrix, method = "binary")
hclust_receptors = hclust(dist_receptors, method = "ward.D2")
order_receptors = hclust_receptors$labels[hclust_receptors$order]

dist_ligands = dist(lr_network_top_matrix %>% t(), method = "binary")
hclust_ligands = hclust(dist_ligands, method = "ward.D2")
order_ligands_receptor = hclust_ligands$labels[hclust_ligands$order]

order_receptors = order_receptors %>% intersect(rownames(lr_network_top_matrix))
order_ligands_receptor = order_ligands_receptor %>% intersect(colnames(lr_network_top_matrix))

vis_ligand_receptor_network = lr_network_top_matrix[order_receptors, order_ligands_receptor]
rownames(vis_ligand_receptor_network) = order_receptors %>% make.names()
colnames(vis_ligand_receptor_network) = order_ligands_receptor %>% make.names()

p_ligand_receptor_network = vis_ligand_receptor_network %>% t() %>% make_heatmap_ggplot("Ligands","Receptors", color = "mediumvioletred", x_axis_position = "top",legend_title = "Prior interaction potential")
p_ligand_receptor_network
#ggsave(filename = "Nichenet TUMvsMUC sender Tregs receiver MYELOID-ALL ligand-receptor-broad.pdf", plot = last_plot(), dpi = 300, width = 8, height = 8)



## Filtering for documented links
lr_network_strict = lr_network %>% filter(database != "ppi_prediction_go" & database != "ppi_prediction")
ligands_bona_fide = lr_network_strict %>% pull(from) %>% unique()
receptors_bona_fide = lr_network_strict %>% pull(to) %>% unique()

lr_network_top_df_large_strict = lr_network_top_df_large %>% distinct(from,to) %>% inner_join(lr_network_strict, by = c("from","to")) %>% distinct(from,to)
lr_network_top_df_large_strict = lr_network_top_df_large_strict %>% inner_join(lr_network_top_df_large, by = c("from","to"))

lr_network_top_df_strict = lr_network_top_df_large_strict %>% spread("from","weight",fill = 0)
lr_network_top_matrix_strict = lr_network_top_df_strict %>% select(-to) %>% as.matrix() %>% magrittr::set_rownames(lr_network_top_df_strict$to)

dist_receptors = dist(lr_network_top_matrix_strict, method = "binary")
hclust_receptors = hclust(dist_receptors, method = "ward.D2")
order_receptors = hclust_receptors$labels[hclust_receptors$order]

dist_ligands = dist(lr_network_top_matrix_strict %>% t(), method = "binary")
hclust_ligands = hclust(dist_ligands, method = "ward.D2")
order_ligands_receptor = hclust_ligands$labels[hclust_ligands$order]

order_receptors = order_receptors %>% intersect(rownames(lr_network_top_matrix_strict))
order_ligands_receptor = order_ligands_receptor %>% intersect(colnames(lr_network_top_matrix_strict))

vis_ligand_receptor_network_strict = lr_network_top_matrix_strict[order_receptors, order_ligands_receptor]
rownames(vis_ligand_receptor_network_strict) = order_receptors %>% make.names()
colnames(vis_ligand_receptor_network_strict) = order_ligands_receptor %>% make.names()

p_ligand_receptor_network_strict = vis_ligand_receptor_network_strict %>% t() %>% make_heatmap_ggplot("Ligands","Receptors", color = "mediumvioletred", x_axis_position = "top",legend_title = "Prior interaction potential\n(bona fide)")
p_ligand_receptor_network_strict
#ggsave(filename = "Nichenet TUMvsMUC sender Tregs receiver MYELOID-ALL ligand-receptor-strict.pdf", plot = last_plot(), dpi = 300, width = 8, height = 8)




## Summary visualization
# combined heatmap: overlay ligand activities with target genes
ligand_pearson_matrix = ligand_activities %>% select(pearson) %>% as.matrix() %>% magrittr::set_rownames(ligand_activities$test_ligand)

rownames(ligand_pearson_matrix) = rownames(ligand_pearson_matrix) %>% make.names()
colnames(ligand_pearson_matrix) = colnames(ligand_pearson_matrix) %>% make.names()

vis_ligand_pearson = ligand_pearson_matrix[order_ligands, ] %>% as.matrix(ncol = 1) %>% magrittr::set_colnames("Pearson")
p_ligand_pearson = vis_ligand_pearson %>% make_heatmap_ggplot("Prioritized ligands","Ligand activity", color = "darkorange",legend_position = "top", x_axis_position = "top", legend_title = "Pearson correlation coefficient\ntarget gene prediction ability)") + theme(legend.text = element_text(size = 9))

figures_without_legend = cowplot::plot_grid(p_ligand_pearson + theme(legend.position = "none", axis.ticks = element_blank()) + theme(axis.title.x = element_text()),
                                            p_ligand_target_network + theme(legend.position = "none", axis.ticks = element_blank()) + ylab(""),
                                            align = "hv",
                                            nrow = 1,
                                            rel_widths = c(ncol(vis_ligand_pearson)+10, ncol(vis_ligand_target)))

legends = cowplot::plot_grid(
  ggpubr::as_ggplot(ggpubr::get_legend(p_ligand_pearson)),
  ggpubr::as_ggplot(ggpubr::get_legend(p_ligand_target_network)),
  nrow = 1,
  align = "h")

combined_plot = cowplot::plot_grid(figures_without_legend, legends, rel_heights = c(10,2), nrow = 2, align = "hv")
combined_plot
p_ligand_pearson
#ggsave(filename = "Nichenet TUMvsMUC sender Tregs receiver MYELOID-ALL ligand-pearson.pdf", plot = last_plot(), dpi = 300, width = 8, height = 8)
combined_plot
#ggsave(filename = "Nichenet TUMvsMUC sender Tregs receiver MYELOID-ALL combined-plot.pdf", plot = last_plot(), dpi = 300, width = 8, height = 8)





#############
## Generating a circos plot to show the connection between LIGANDS and RECEPTORS
expressed_ligands
expressed_receptors
potential_ligands
ligand_activities
best_upstream_ligands
best_upstream_receptors

# Take stuff from above and make a cutoff
active_ligand_target_links_df
cutoff_include_all_ligands = active_ligand_target_links_df$weight %>% quantile(0.66)
active_ligand_target_links_df_circos = active_ligand_target_links_df %>% filter(weight > cutoff_include_all_ligands)

# get the weights of the ligand-receptor interactions as used in the NicheNet model
lr_network_top_df = weighted_networks$lr_sig %>% filter(from %in% best_upstream_ligands & to %in% best_upstream_receptors)
lr_network_top_df
colnames(lr_network_top_df) <- c("ligand", "receptor", "weight")
lr_network_top_df

write.csv(lr_network_top_df, file ="lr_network_top_df_original.csv")
temp_lr_network_top_df <- lr_network_top_df

# read in the edited file with information on ligand-type added
circos.clear()
lr_network_top_df_new <- as_tibble(read.csv(file = "lr_network_top_df_original MYELOID-ALL-Tregs.csv"))
lr_network_top_df <- lr_network_top_df_new[2:6]
lr_network_top_df

grid_col_ligand =c("other" = "darkgreen",
                   "cytokine_coreceptor" = "royalblue",
                   "unique" = "orange")
grid_col_receptor =c(
  "Tregs" = "darkred")

grid_col_tbl_ligand = tibble(ligand_type = grid_col_ligand %>% names(), color_ligand_type = grid_col_ligand)
grid_col_tbl_receptor = tibble(receptor_type = grid_col_receptor %>% names(), color_receptor_type = grid_col_receptor)

circos_links = lr_network_top_df %>% mutate(ligand = paste(ligand," ")) # extra space: make a difference between a gene as ligand and a gene as receptor!
circos_links = circos_links %>% inner_join(grid_col_tbl_ligand) %>% inner_join(grid_col_tbl_receptor)
links_circle = circos_links %>% select(ligand,receptor, weight)

ligand_color = circos_links %>% distinct(ligand,color_ligand_type)
grid_ligand_color = ligand_color$color_ligand_type %>% set_names(ligand_color$ligand)
receptor_color = circos_links %>% distinct(receptor,color_receptor_type)
grid_receptor_color = receptor_color$color_receptor_type %>% set_names(receptor_color$receptor)

grid_col = c(grid_ligand_color,grid_receptor_color)

width_same_cell_same_ligand_type = 0.5
width_different_cell = 6
width_ligand_receptor = 15
width_same_cell_same_receptor_type = 0.5

gaps = c(
  # width_ligand_target,
  rep(width_same_cell_same_ligand_type, times = (circos_links %>% filter(ligand_type == "unique") %>% distinct(ligand) %>% nrow() -1)),
  width_different_cell,
  rep(width_same_cell_same_ligand_type, times = (circos_links %>% filter(ligand_type == "other") %>% distinct(ligand) %>% nrow() -1)),
  width_different_cell,
  rep(width_same_cell_same_ligand_type, times = (circos_links %>% filter(ligand_type == "cytokine_coreceptor") %>% distinct(ligand) %>% nrow() -1)), 
  width_ligand_target,
  rep(width_same_cell_same_target_type, times = (circos_links %>% filter(receptor_type == "Tregs") %>% distinct(receptor) %>% nrow() -1)),
  width_ligand_target
)


circos.par(gap.degree = gaps)
chordDiagram(links_circle, directional = 1,link.sort = TRUE, link.decreasing = FALSE, grid.col = grid_col,transparency = 0, diffHeight = 0.005, direction.type = c("diffHeight", "arrows"),link.arr.type = "big.arrow", link.visible = links_circle$weight >= cutoff_include_all_ligands,annotationTrack = "grid", 
             preAllocateTracks = list(track.height = 0.075))

# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
              facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.55), cex = 0.8)
}, bg.border = NA) #

circos.clear()

# give the option that links in the circos plot will be transparant ~ ligand-target potential score
transparency = circos_links %>% mutate(weight =(weight-min(weight))/(max(weight)-min(weight))) %>% mutate(transparency = 1-weight) %>% .$transparency 

circos.par(gap.degree = gaps)
chordDiagram(links_circle, directional = 1,link.sort = TRUE, link.decreasing = FALSE, grid.col = grid_col,transparency = transparency, diffHeight = 0.005, direction.type = c("diffHeight", "arrows"),link.arr.type = "big.arrow", link.visible = links_circle$weight >= cutoff_include_all_ligands,annotationTrack = "grid", 
             preAllocateTracks = list(track.height = 0.075))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
              facing = "clockwise", niceFacing = TRUE, adj = c(-0.2, 0.55), cex = 1.3)
}, bg.border = NA) #




